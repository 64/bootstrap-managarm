From 8500b69e8ddc57d59182720b49be0c0d99c93137 Mon Sep 17 00:00:00 2001
From: Matt Taylor <mstaveleytaylor@gmail.com>
Date: Sat, 19 Jun 2021 16:03:24 +0100
Subject: [PATCH 3/3] managarm: Add socket defines for socket2

---
 src/unix/mlibc/mod.rs | 83 ++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 75 insertions(+), 8 deletions(-)

diff --git a/src/unix/mlibc/mod.rs b/src/unix/mlibc/mod.rs
index f374aa1a8..0cd55e380 100644
--- a/src/unix/mlibc/mod.rs
+++ b/src/unix/mlibc/mod.rs
@@ -70,6 +70,17 @@ pub type fsblkcnt_t = ::c_uint;
 // options/posix/include/bits/posix/fsfilcnt_t.h
 pub type fsfilcnt_t = ::c_uint;
 
+// options/posix/include/sys/utsname.h
+s! {
+    pub struct utsname {
+        pub sysname: [::c_char; 65],
+        pub nodename: [::c_char; 65],
+        pub release: [::c_char; 65],
+        pub version: [::c_char; 65],
+        pub machine: [::c_char; 65],
+    }
+}
+
 // abis/mlibc/signal.h
 pub const SIGKILL: ::c_int = 9;
 pub const SIGPIPE: ::c_int = 13;
@@ -84,7 +95,7 @@ s! {
         pub si_uid: ::uid_t,
         pub si_addr: *mut ::c_void,
         pub si_status: ::c_int,
-        pub si_value: sigval,
+        pub si_value: ::sigval,
     }
     pub struct sigaction {
         pub sa_handler: ::Option<extern fn(::c_int)>,
@@ -93,12 +104,6 @@ s! {
         pub sa_sigaction: ::Option<extern fn(::c_int, *mut siginfo_t, *mut ::c_void)>,
     }
 }
-s_no_extra_traits! {
-    pub union sigval {
-        pub sival_int: ::c_int,
-        pub sival_ptr: *mut ::c_void,
-    }
-}
 
 // abis/mlibc/termios.h
 pub const NCCS: usize = 11;
@@ -166,28 +171,54 @@ pub const _SC_PAGE_SIZE: ::c_int = 3;
 pub const AF_INET6: ::c_int = PF_INET6;
 pub const AF_INET: ::c_int = PF_INET;
 pub const AF_UNIX: ::c_int = 3;
+pub const AF_UNSPEC: ::c_int = PF_UNSPEC;
+pub const MSG_EOR: ::c_int = 4;
+pub const MSG_OOB: ::c_int = 8;
 pub const MSG_PEEK: ::c_int = 0x20;
+pub const MSG_TRUNC: ::c_int = 0x40;
 pub const PF_INET6: ::c_int = 2;
 pub const PF_INET: ::c_int = 1;
 pub const PF_UNIX: ::c_int = 3;
+pub const PF_UNSPEC: ::c_int = 4;
 pub const SHUT_RD: ::c_int = 1;
 pub const SHUT_RDWR: ::c_int = 2;
 pub const SHUT_WR: ::c_int = 3;
 pub const SOCK_DGRAM: ::c_int = 1;
+pub const SOCK_RAW: ::c_int = 2;
+pub const SOCK_RDM: ::c_int = 4;
+pub const SOCK_SEQPACKET: ::c_int = 3;
 pub const SOCK_STREAM: ::c_int = 4;
 pub const SOL_SOCKET: ::c_int = 1;
 pub const SO_BROADCAST: ::c_int = 6;
 pub const SO_ERROR: ::c_int = 5;
+pub const SO_KEEPALIVE: ::c_int = 6;
+pub const SO_LINGER: ::c_int = 7;
+pub const SO_OOBINLINE: ::c_int = 8;
+pub const SO_RCVBUF: ::c_int = 9;
 pub const SO_RCVTIMEO: ::c_int = 11;
 pub const SO_REUSEADDR: ::c_int = 12;
+pub const SO_SNDBUF: ::c_int = 13;
 pub const SO_SNDTIMEO: ::c_int = 15;
+pub const TCP_KEEPIDLE: ::c_int = 4;
 pub type sa_family_t = ::c_uint;
 s! {
     pub struct sockaddr_storage {
         pub ss_family: sa_family_t,
         __padding: [u8; 128 - ::mem::size_of::<sa_family_t>()],
     }
+    pub struct msghdr {
+        pub msg_name: *mut ::c_void,
+        pub msg_namelen: socklen_t,
+        pub msg_iov: *mut ::iovec,
+        pub msg_iovlen: ::c_int,
+        pub msg_control: *mut ::c_void,
+        pub msg_controllen: socklen_t,
+        pub msg_flags: ::c_int,
+    }
 }
+// IovLen
+// msghdr
+// sin_zero
 
 // abis/mlibc/errno.h
 pub const EACCES: ::c_int = 1002;
@@ -215,6 +246,8 @@ pub const EWOULDBLOCK: ::c_int = EAGAIN;
 // options/posix/include/fcntl.h
 pub const AT_FDCWD: ::c_int = -100;
 pub const F_DUPFD_CLOEXEC: ::c_int = 2;
+pub const F_GETFD: ::c_int = 3;
+pub const F_SETFD: ::c_int = 4;
 pub const F_GETFL: ::c_int = 5;
 pub const F_SETFL: ::c_int = 6;
 pub const O_ACCMODE: ::c_int = 7;
@@ -310,6 +343,7 @@ safe_f! {
 
 // options/linux/include/sys/poll.h
 // TODO: Port epoll!
+pub const POLLERR: ::c_short = 0x10;
 pub const POLLHUP: ::c_short = 8;
 pub const POLLIN: ::c_short = 1;
 pub const POLLNVAL: ::c_short = 0x40;
@@ -491,10 +525,14 @@ s! {
 // abis/mlibc/in.h
 pub const IPV6_ADD_MEMBERSHIP: ::c_int = 1;
 pub const IPV6_DROP_MEMBERSHIP: ::c_int = 2;
+pub const IPV6_MULTICAST_HOPS: ::c_int = 3;
+pub const IPV6_MULTICAST_IF: ::c_int = 4;
 pub const IPV6_MULTICAST_LOOP: ::c_int = 5;
+pub const IPV6_UNICAST_HOPS: ::c_int = 6;
 pub const IPV6_V6ONLY: ::c_int = 7;
 pub const IP_ADD_MEMBERSHIP: ::c_int = 35;
 pub const IP_DROP_MEMBERSHIP: ::c_int = 36;
+pub const IP_MULTICAST_IF: ::c_int = 32;
 pub const IP_MULTICAST_LOOP: ::c_int = 34;
 pub const IP_MULTICAST_TTL: ::c_int = 33;
 pub const IP_TTL: ::c_int = 2;
@@ -510,7 +548,7 @@ s! {
         pub sin_family: sa_family_t,
         pub sin_port: in_port_t,
         pub sin_addr: in_addr,
-        pub __padding: [u8; 8], // std relies on this being public
+        pub sin_zero: [u8; 8],
     }
     pub struct sockaddr_in6 {
         pub sin6_family: sa_family_t,
@@ -529,6 +567,32 @@ s_no_extra_traits! {
     }
 }
 
+cfg_if! {
+    if #[cfg(feature = "extra_traits")] {
+        impl PartialEq for fd_set {
+            fn eq(&self, other: &fd_set) -> bool {
+                unsafe { self.fds_bits }
+                    .iter()
+                    .zip(unsafe { other.fds_bits }.iter())
+                    .all(|(a, b)| a == b)
+            }
+        }
+        impl Eq for fd_set {}
+        impl ::fmt::Debug for fd_set {
+            fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {
+                f.debug_list()
+                    .entries(unsafe { self.fds_bits }.iter())
+                    .finish()
+            }
+        }
+        impl ::hash::Hash for fd_set {
+            fn hash<H: ::hash::Hasher>(&self, state: &mut H) {
+                unsafe { self.fds_bits }.hash(state);
+            }
+        }
+    }
+}
+
 extern "C" {
     pub fn bind(socket: ::c_int, address: *const ::sockaddr, address_len: ::socklen_t) -> ::c_int;
     pub fn clock_gettime(clk_id: clockid_t, tp: *mut ::timespec) -> ::c_int;
@@ -593,7 +657,10 @@ extern "C" {
         addr: *mut ::sockaddr,
         addrlen: *mut ::socklen_t,
     ) -> ::ssize_t;
+    pub fn recvmsg(fd: ::c_int, msg: *mut ::msghdr, flags: ::c_int) -> ::ssize_t;
+    pub fn sendmsg(fd: ::c_int, msg: *const ::msghdr, flags: ::c_int) -> ::ssize_t;
     pub fn setgroups(ngroups: ::c_int, ptr: *const ::gid_t) -> ::c_int;
     pub fn setpwent();
+    pub fn uname(buf: *mut ::utsname) -> ::c_int;
     pub fn writev(fd: ::c_int, iov: *const ::iovec, count: ::c_int) -> ::ssize_t;
 }
-- 
2.32.0

