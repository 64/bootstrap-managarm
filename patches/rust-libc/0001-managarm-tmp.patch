From 720cfcf4ba4a0fadd55b3d8133e183ff5e82c479 Mon Sep 17 00:00:00 2001
From: Matt Taylor <mstaveleytaylor@gmail.com>
Date: Mon, 12 Jul 2021 00:04:54 +0100
Subject: [PATCH] managarm: tmp

---
 src/unix/mlibc/mod.rs | 179 ++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 172 insertions(+), 7 deletions(-)

diff --git a/src/unix/mlibc/mod.rs b/src/unix/mlibc/mod.rs
index 0cd55e380..e71ee9c2d 100644
--- a/src/unix/mlibc/mod.rs
+++ b/src/unix/mlibc/mod.rs
@@ -81,10 +81,44 @@ s! {
     }
 }
 
+// options/linux/include/sys/eventfd.h
+pub const EFD_CLOEXEC: ::c_int = O_CLOEXEC;
+pub const EFD_NONBLOCK: ::c_int = O_NONBLOCK;
+
 // abis/mlibc/signal.h
+pub const SA_RESTART: ::c_int = 1 << 3;
+pub const SA_SIGINFO: ::c_int = 1 << 4;
+pub const SIGABRT: ::c_int = 6;
+pub const SIGALRM: ::c_int = 14;
+pub const SIGBUS: ::c_int = 7;
+pub const SIGCHLD: ::c_int = 17;
+pub const SIGCONT: ::c_int = 18;
+pub const SIGFPE: ::c_int = 8;
+pub const SIGHUP: ::c_int = 1;
+pub const SIGILL: ::c_int = 4;
+pub const SIGINT: ::c_int = 2;
+pub const SIGIO: ::c_int = 29;
 pub const SIGKILL: ::c_int = 9;
 pub const SIGPIPE: ::c_int = 13;
+pub const SIGPROF: ::c_int = 27;
+pub const SIGQUIT: ::c_int = 3;
+pub const SIGSEGV: ::c_int = 11;
+pub const SIGSTOP: ::c_int = 19;
+pub const SIGSYS: ::c_int = 31;
+pub const SIGTERM: ::c_int = 15;
+pub const SIGTRAP: ::c_int = 5;
+pub const SIGTSTP: ::c_int = 20;
+pub const SIGTTIN: ::c_int = 21;
+pub const SIGTTOU: ::c_int = 22;
+pub const SIGURG: ::c_int = 23;
+pub const SIGUSR1: ::c_int = 10;
+pub const SIGUSR2: ::c_int = 12;
+pub const SIGVTALRM: ::c_int = 26;
+pub const SIGWINCH: ::c_int = 28;
+pub const SIGXCPU: ::c_int = 24;
+pub const SIGXFSZ: ::c_int = 25;
 pub const SIG_SETMASK: ::c_int = 3;
+pub const SIG_UNBLOCK: ::c_int = 2;
 pub type sigset_t = ::c_long;
 s! {
     pub struct siginfo_t {
@@ -98,15 +132,16 @@ s! {
         pub si_value: ::sigval,
     }
     pub struct sigaction {
-        pub sa_handler: ::Option<extern fn(::c_int)>,
+        pub sa_handler: ::sighandler_t,
         pub sa_mask: sigset_t,
         pub sa_flags: ::c_int,
-        pub sa_sigaction: ::Option<extern fn(::c_int, *mut siginfo_t, *mut ::c_void)>,
+        pub sa_sigaction: ::sighandler_t,
     }
 }
 
 // abis/mlibc/termios.h
 pub const NCCS: usize = 11;
+pub const TCSANOW: ::c_int = 1;
 pub type cc_t = ::c_uint;
 pub type speed_t = ::c_uint;
 pub type tcflag_t = ::c_uint;
@@ -166,6 +201,7 @@ pub const _SC_GETPW_R_SIZE_MAX: ::c_int = 1;
 pub const _SC_NPROCESSORS_ONLN: ::c_int = 6;
 pub const _SC_PAGESIZE: ::c_int = _SC_PAGE_SIZE;
 pub const _SC_PAGE_SIZE: ::c_int = 3;
+pub const _SC_HOST_NAME_MAX: ::c_int = 14;
 
 // abis/mlibc/socket.h
 pub const AF_INET6: ::c_int = PF_INET6;
@@ -176,6 +212,7 @@ pub const MSG_EOR: ::c_int = 4;
 pub const MSG_OOB: ::c_int = 8;
 pub const MSG_PEEK: ::c_int = 0x20;
 pub const MSG_TRUNC: ::c_int = 0x40;
+pub const MSG_DONTWAIT: ::c_int = 0x1000;
 pub const PF_INET6: ::c_int = 2;
 pub const PF_INET: ::c_int = 1;
 pub const PF_UNIX: ::c_int = 3;
@@ -183,7 +220,9 @@ pub const PF_UNSPEC: ::c_int = 4;
 pub const SHUT_RD: ::c_int = 1;
 pub const SHUT_RDWR: ::c_int = 2;
 pub const SHUT_WR: ::c_int = 3;
+pub const SOCK_CLOEXEC: ::c_int = 0x20000;
 pub const SOCK_DGRAM: ::c_int = 1;
+pub const SOCK_NONBLOCK: ::c_int = 0x10000;
 pub const SOCK_RAW: ::c_int = 2;
 pub const SOCK_RDM: ::c_int = 4;
 pub const SOCK_SEQPACKET: ::c_int = 3;
@@ -197,6 +236,7 @@ pub const SO_OOBINLINE: ::c_int = 8;
 pub const SO_RCVBUF: ::c_int = 9;
 pub const SO_RCVTIMEO: ::c_int = 11;
 pub const SO_REUSEADDR: ::c_int = 12;
+pub const SO_REUSEPORT: ::c_int = 22;
 pub const SO_SNDBUF: ::c_int = 13;
 pub const SO_SNDTIMEO: ::c_int = 15;
 pub const TCP_KEEPIDLE: ::c_int = 4;
@@ -216,9 +256,6 @@ s! {
         pub msg_flags: ::c_int,
     }
 }
-// IovLen
-// msghdr
-// sin_zero
 
 // abis/mlibc/errno.h
 pub const EACCES: ::c_int = 1002;
@@ -245,6 +282,7 @@ pub const EWOULDBLOCK: ::c_int = EAGAIN;
 
 // options/posix/include/fcntl.h
 pub const AT_FDCWD: ::c_int = -100;
+pub const AT_SYMLINK_NOFOLLOW: ::c_int = 4;
 pub const F_DUPFD_CLOEXEC: ::c_int = 2;
 pub const F_GETFD: ::c_int = 3;
 pub const F_SETFD: ::c_int = 4;
@@ -342,7 +380,6 @@ safe_f! {
 }
 
 // options/linux/include/sys/poll.h
-// TODO: Port epoll!
 pub const POLLERR: ::c_short = 0x10;
 pub const POLLHUP: ::c_short = 8;
 pub const POLLIN: ::c_short = 1;
@@ -350,12 +387,45 @@ pub const POLLNVAL: ::c_short = 0x40;
 pub const POLLOUT: ::c_short = 2;
 pub type nfds_t = ::size_t;
 
+// options/linux/include/sys/epoll.h
+pub const EPOLLERR: ::c_int = 8;
+pub const EPOLLET: ::c_int = 1 << 31;
+pub const EPOLLEXCLUSIVE: ::c_int = 1 << 28;
+pub const EPOLLHUP: ::c_int = 0x10;
+pub const EPOLLIN: ::c_int = 1;
+pub const EPOLLMSG: ::c_int = 0x400;
+pub const EPOLLONESHOT: ::c_int = 1 << 30;
+pub const EPOLLOUT: ::c_int = 4;
+pub const EPOLLPRI: ::c_int = 2;
+pub const EPOLLRDBAND: ::c_int = 0x80;
+pub const EPOLLRDHUP: ::c_int = 0x2000;
+pub const EPOLLRDNORM: ::c_int = 0x40;
+pub const EPOLLWAKEUP: ::c_int = 1 << 29;
+pub const EPOLLWRBAND: ::c_int = 0x200;
+pub const EPOLLWRNORM: ::c_int = 0x100;
+pub const EPOLL_CLOEXEC: ::c_int = 1;
+pub const EPOLL_CTL_ADD: ::c_int = 1;
+pub const EPOLL_CTL_DEL: ::c_int = 2;
+pub const EPOLL_CTL_MOD: ::c_int = 3;
+pub const EPOLL_NONBLOCK: ::c_int = 2;
+s! {
+    pub struct epoll_event {
+        pub events: u32,
+        // bit of a hack: this is actually a union, but we match the linux impl
+        pub u64: u64
+    }
+}
+
 // options/glibc/include/sys/ioctl.h
 pub const FIOCLEX: ::c_ulong = 0x5451;
 pub const FIONBIO: ::c_ulong = 0x5421;
 
 // options/ansi/include/limits.h
 pub const PTHREAD_STACK_MIN: ::size_t = 16384;
+pub const PATH_MAX: ::size_t = 4096;
+
+// options/ansi/include/stdio.h
+pub const FILENAME_MAX: ::size_t = 256;
 
 // options/posix/include/pwd.h
 s! {
@@ -428,6 +498,16 @@ s! {
 
 // options/posix/include/netdb.h
 pub const EAI_SYSTEM: ::c_int = 9;
+pub const EAI_AGAIN: ::c_int = 1;
+pub const EAI_BADFLAGS: ::c_int = 2;
+pub const EAI_FAMILY: ::c_int = 4;
+pub const EAI_NODATA: ::c_int = 11;
+pub const EAI_NONAME: ::c_int = 6;
+pub const EAI_MEMORY: ::c_int = 5;
+pub const EAI_FAIL: ::c_int = 3;
+pub const EAI_SOCKTYPE: ::c_int = 8;
+pub const EAI_SERVICE: ::c_int = 7;
+pub const NI_NUMERICSERV: ::c_int = 2;
 s! {
     pub struct addrinfo {
         pub ai_flags: ::c_int,
@@ -567,6 +647,38 @@ s_no_extra_traits! {
     }
 }
 
+// options/linux/include/utmpx.h
+pub const ACCOUNTING: ::c_short = 9;
+pub const BOOT_TIME: ::c_short = 2;
+pub const DEAD_PROCESS: ::c_short = 8;
+pub const EMPTY: ::c_short = 0;
+pub const INIT_PROCESS: ::c_short = 5;
+pub const LOGIN_PROCESS: ::c_short = 6;
+pub const NEW_TIME: ::c_short = 3;
+pub const OLD_TIME: ::c_short = 4;
+pub const RUN_LVL: ::c_short = 1;
+pub const USER_PROCESS: ::c_short = 7;
+pub const __UT_HOSTSIZE: usize = 256;
+pub const __UT_LINESIZE: usize = 32;
+pub const __UT_NAMESIZE: usize = 32;
+s! {
+    pub struct utmpx {
+        pub ut_type: ::c_short,
+        pub __ut_pad1: ::c_short,
+        pub ut_pid: ::pid_t,
+        pub ut_line: [::c_char; __UT_LINESIZE],
+        pub ut_id: [::c_char; 4],
+        pub ut_user: [::c_char; __UT_NAMESIZE],
+        pub ut_host: [::c_char; __UT_HOSTSIZE],
+        pub ut_exit: ::c_short,
+        pub ut_session: ::c_int,
+        pub __ut_pad2: ::c_int,
+        pub ut_tv: ::timeval,
+        pub ut_addr_v6: [::c_uint; 4],
+        pub __unused: [::c_char; 20],
+    }
+}
+
 cfg_if! {
     if #[cfg(feature = "extra_traits")] {
         impl PartialEq for fd_set {
@@ -594,10 +706,12 @@ cfg_if! {
 }
 
 extern "C" {
+    pub fn __errno_location() -> *mut ::c_int;
     pub fn bind(socket: ::c_int, address: *const ::sockaddr, address_len: ::socklen_t) -> ::c_int;
     pub fn clock_gettime(clk_id: clockid_t, tp: *mut ::timespec) -> ::c_int;
     pub fn clock_settime(clk_id: clockid_t, tp: *const ::timespec) -> ::c_int;
     pub fn endpwent();
+    pub fn futimens(fd: ::c_int, times: *const ::timespec) -> ::c_int;
     pub fn getpwent() -> *mut passwd;
     pub fn getgrgid_r(
         gid: ::gid_t,
@@ -634,6 +748,7 @@ extern "C" {
         result: *mut *mut passwd,
     ) -> ::c_int;
     pub fn ioctl(fd: ::c_int, request: ::c_ulong, ...) -> ::c_int;
+    pub fn lutimes(file: *const ::c_char, times: *const ::timeval) -> ::c_int;
     pub fn mprotect(addr: *mut ::c_void, len: ::size_t, prot: ::c_int) -> ::c_int;
     pub fn msync(addr: *mut ::c_void, len: ::size_t, flags: ::c_int) -> ::c_int;
     pub fn pthread_condattr_setclock(
@@ -659,8 +774,58 @@ extern "C" {
     ) -> ::ssize_t;
     pub fn recvmsg(fd: ::c_int, msg: *mut ::msghdr, flags: ::c_int) -> ::ssize_t;
     pub fn sendmsg(fd: ::c_int, msg: *const ::msghdr, flags: ::c_int) -> ::ssize_t;
-    pub fn setgroups(ngroups: ::c_int, ptr: *const ::gid_t) -> ::c_int;
+    pub fn setgroups(ngroups: ::size_t, ptr: *const ::gid_t) -> ::c_int;
     pub fn setpwent();
+    pub fn strerror_r(errnum: ::c_int, buf: *mut c_char, buflen: ::size_t) -> ::c_int;
     pub fn uname(buf: *mut ::utsname) -> ::c_int;
+    pub fn utimensat(
+        fd: ::c_int,
+        path: *const ::c_char,
+        times: *const ::timespec,
+        flag: ::c_int,
+    ) -> ::c_int;
     pub fn writev(fd: ::c_int, iov: *const ::iovec, count: ::c_int) -> ::ssize_t;
+    pub fn getnameinfo(
+        sa: *const ::sockaddr,
+        salen: ::socklen_t,
+        host: *mut ::c_char,
+        hostlen: ::socklen_t,
+        serv: *mut ::c_char,
+        sevlen: ::socklen_t,
+        flags: ::c_int,
+    ) -> ::c_int;
+    pub fn epoll_ctl(epfd: ::c_int, op: ::c_int, fd: ::c_int, event: *mut ::epoll_event)
+        -> ::c_int;
+    pub fn epoll_create1(flags: ::c_int) -> ::c_int;
+    pub fn epoll_wait(
+        epfd: ::c_int,
+        events: *mut ::epoll_event,
+        maxevents: ::c_int,
+        timeout: ::c_int,
+    ) -> ::c_int;
+    pub fn accept4(
+        fd: ::c_int,
+        addr: *mut ::sockaddr,
+        len: *mut ::socklen_t,
+        flg: ::c_int,
+    ) -> ::c_int;
+    pub fn pipe2(fds: *mut ::c_int, flags: ::c_int) -> ::c_int;
+    pub fn eventfd(init: ::c_uint, flags: ::c_int) -> ::c_int;
+    pub fn getgrgid(gid: ::gid_t) -> *mut ::group;
+    pub fn getgrnam(name: *const ::c_char) -> *mut ::group;
+    pub fn sethostname(name: *const ::c_char, len: ::size_t) -> ::c_int;
+    pub fn getutxent() -> *mut utmpx;
+    pub fn setutxent();
+    pub fn endutxent();
+    pub fn utmpxname(file: *const ::c_char) -> ::c_int;
+    pub fn pthread_atfork(
+        prepare: ::Option<unsafe extern "C" fn()>,
+        parent: ::Option<unsafe extern "C" fn()>,
+        child: ::Option<unsafe extern "C" fn()>,
+    ) -> ::c_int;
+    pub fn getloadavg(
+        loadavg: *mut ::c_double,
+        nelem: ::c_int
+    ) -> ::c_int;
+    pub fn sync();
 }
-- 
2.32.0

